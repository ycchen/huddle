== Welcome to Huddle

1. Create huddle application

$ rails new huddle

2. Add devise gem in Gemfile

gem 'devise'
group :test, :development do
  gem 'rspec-rails'
end

== User Model

3. Install Devise gem

$ rails g devise:install

4. Create user model

$ rails g devise User

$ rake db:migrate

5. Add data to user.yml file

== Project Model

6. Generate scaffold project

$ rails g scaffold project name:string

$ rake db:migrate

== Project User Join

Since projects and users have a many-to-many relationship, so we need to join table by using this command

$ rails g migration project_user_join

edit the migration script

$ rake db:migrate

== Generate status_report model

$ rails g scaffold status_report project:references user:references yesterday:text today:text status_date:date invoke rspec

$ rake db:migrate

* added relationship between user and status_report models

/* user model */

has_many :status_reports

/* status_report model */

belongs_to :user


== Add authentication to Project and Report

== Generate User view template from devise gem

$ rails g devise:views devise

== Add gravatar-ultimate gem to Gemfile

added following method to models/user.rb

def avatar
  Gravatar.new(self.email).image_url
end


== Rake command

$ rake --tasks

== Added cancan gem

/*

== Generate role model

$ rails g scaffold roles name:string

== Generate roles_users model

$ rails g scaffold roles_user role:references user:references

*/

== Generate migration script to add role to user model

Embedding a one to manay relationship

$ rails g migration add_role_to_users role:string

$ rake db:migrate

1. Add following code to User model, set a ROLES as constant

ROLES = %w[admin moderator author]

2. Add following code to view/devise/registrations/new.html.erb

  <div><%= f.label :roles %><br/>
    <%= f.collection_select :role, User::ROLES, :to_s, :humanize %>
  </div>

== Generate projects_users model

$ rails g model projects_user project:references user:references

$ rake db:migrate

* set up relationship between project, projects_user models

/* models/project.rb */

has_many :projects_users
has_many :users, :through => :projects_users

/* models/projects_user.rb */

belongs_to :project
belongs_to :user

/* views/projects/index.html.erb */

  <% results = [] 
    project.users.each do |user| 
      results << content_tag(:div, content_tag(:p, user.display_name))
    end
  %>
  <%= results.join("").html_safe %>

or 

  <% project.users.each do |user| %>  
      <%= user.display_name %>
  <% end %>

== Added admin? in models/user.rb

def admin?
  self.role == 'admin'
end

== Added admin? helper method in controllers/application_controller.rb

/* By adding following code to application_controller.rb to enable this helper method to be use in views */

helper_method :admin?

  protected

  def admin?
    unless current_user && current_user.admin?
      false
    else
      true
    end
  end

  def authorize
    unless admin?
      flash[:error] = "Unauthorized access"
        redirect_to projects_path
        false
    end
  end


== Generate random 3 number from an array

$ n = (0..10).ta_a

$ n.shuffle[0..2] ==> [1,4,6] 

$ n.sample 3 ==> [4,2,8]

$ 3.times.map{rand(1..9)}


== Generate dashboard model

$ rails g controller dashboard index

== Added dashboard to routes.rb

== Added relationship between user, project, and projects_users models

/* user model */
has_many :projects_users
has_many :projects, :through => :projects_users

/* project model */

has_many :projects_users

/* using :delete_all if you don't need a callback, otherwise use :destroy */

has_many :users, :through => :proejcts_users, :dependent => :delete_all


== Added RoutingError handler at the end of routes.rb

match '*path(.:format)', :to => 'application#routing_error'

/* controller/application_controller.rb */

def routing_error
  render_not_found
end

def render_not_found
  flash[:notice] = 'The object you tried to access does not exist!'
  redirect_to root_path
end

== Added ActiveRecord::RecordNotFound handler

/* add following code at the top of controlers/application_controller.rb */

rescue_from ActiveRecord::RecordNotFound, :with => :render_not_found

== Added api controller, routes, and assoicated api controllers

1. create app\controllers\api folder

2. create app\controllers\api\api_controller.rb

3. create app\controllers\api\posts_controller.rb

4. modified config\routes.rb to add api routes




== Getting Started

1. At the command prompt, create a new Rails application:
       <tt>rails new myapp</tt> (where <tt>myapp</tt> is the application name)

2. Change directory to <tt>myapp</tt> and start the web server:
       <tt>cd myapp; rails server</tt> (run with --help for options)

3. Go to http://localhost:3000/ and you'll see:
       "Welcome aboard: You're riding Ruby on Rails!"

4. Follow the guidelines to start developing your application. You can find
the following resources handy:

* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
* Ruby on Rails Tutorial Book: http://www.railstutorial.org/


== Debugging Rails




== Debugger

Debugger support is available through the debugger command when you start your
Mongrel or WEBrick server with --debugger. This means that you can break out of
execution at any point in the code, investigate and change the model, and then,
resume execution! You need to install ruby-debug to run the server in debugging
mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:

  class WeblogController < ActionController::Base
    def index
      @posts = Post.all
      debugger
    end
  end

So the controller will accept the action, run the first line, then present you
with a IRB prompt in the server window. Here you can do things like:

  >> @posts.inspect
  => "[#<Post:0x14a6be8
          @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
       #<Post:0x14a6620
          @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
  >> @posts.first.title = "hello from a debugger"
  => "hello from a debugger"

...and even better, you can examine how your runtime objects actually work:

  >> f = @posts.first
  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
  >> f.
  Display all 152 possibilities? (y or n)

Finally, when you're ready to resume execution, you can enter "cont".


== Console

The console is a Ruby shell, which allows you to interact with your
application's domain model. Here you'll have all parts of the application
configured, just like it is when the application is running. You can inspect
domain models, change values, and save to the database. Starting the script
without arguments will launch it in the development environment.

To start the console, run <tt>rails console</tt> from the application
directory.

Options:

* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
  made to the database.
* Passing an environment name as an argument will load the corresponding
  environment. Example: <tt>rails console production</tt>.

To reload your controllers and models after launching the console run
<tt>reload!</tt>

More information about irb can be found at:
link:http://www.rubycentral.org/pickaxe/irb.html


== dbconsole

You can go to the command line of your database directly through <tt>rails
dbconsole</tt>. You would be connected to the database with the credentials
defined in database.yml. Starting the script without arguments will connect you
to the development database. Passing an argument will connect you to a different
database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
PostgreSQL and SQLite 3.

== Description of Contents

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- assets
  |       |-- images
  |       |-- javascripts
  |       `-- stylesheets
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   `-- tasks
  |-- log
  |-- public
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   |-- cache
  |   |-- pids
  |   |-- sessions
  |   `-- sockets
  `-- vendor
      |-- assets
          `-- stylesheets
      `-- plugins

app
  Holds all the code that's specific to this particular application.

app/assets
  Contains subdirectories for images, stylesheets, and JavaScript files.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from
  ApplicationController which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb. Models descend from
  ActiveRecord::Base by default.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use
  eRuby syntax by default.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the
  common header/footer method of wrapping views. In your views, define a layout
  using the <tt>layout :default</tt> and create a file named default.html.erb.
  Inside default.html.erb, call <% yield %> to render the view using this
  layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are
  generated for you automatically when using generators for controllers.
  Helpers can be used to wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when
  generated using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers. This directory is in
  the load path.

public
  The directory available for the web server. Also contains the dispatchers and the
  default HTML files. This should be set as the DOCUMENT_ROOT of your web
  server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate
  command, template test files will be generated for you and placed in this
  directory.

vendor
  External libraries that the application depends on. Also includes the plugins
  subdirectory. If the app has frozen rails, those gems also go here, under
  vendor/rails/. This directory is in the load path.
